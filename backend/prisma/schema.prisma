generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  passwordHash String
  name         String?
  role         Role           @default(CUSTOMER)
  refreshTokens RefreshToken[]
  reservations Reservation[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  location    String?
  startAt     DateTime
  endAt       DateTime
  organizerId Int
  tickets     Ticket[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Ticket {
  id        Int      @id @default(autoincrement())
  eventId   Int
  type      String
  price     Float
  quantity  Int
  event     Event    @relation(fields: [eventId], references: [id])
  reservations ReservationTicket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id          Int       @id @default(autoincrement())
  userId      Int
  status      ReservationStatus @default(PENDING)
  reservedAt  DateTime  @default(now())
  tickets     ReservationTicket[]
  payment     Payment?
  user        User      @relation(fields: [userId], references: [id])
}

model ReservationTicket {
  id           Int @id @default(autoincrement())
  reservationId Int
  ticketId     Int
  quantity     Int
  reservation  Reservation @relation(fields: [reservationId], references: [id])
  ticket       Ticket      @relation(fields: [ticketId], references: [id])
}

model Payment {
  id            Int       @id @default(autoincrement())
  reservationId Int
  amount        Float
  provider      String
  status        PaymentStatus @default(SUCCESS)
  createdAt     DateTime @default(now())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model RefreshToken {
  id        Int    @id @default(autoincrement())
  tokenHash String @unique
  userId    Int
  revoked   Boolean @default(false)
  expiresAt DateTime
  user      User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  ORGANIZER
  CUSTOMER
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
